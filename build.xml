<project default="compile" basedir="." name="lphybeast">

    <!-- Ant build fails if the repo dir isn't named ../LPhyBeast -->
    <property name="lbName" value="LPhyBeast"/>
    <!-- source code dir separated from test   -->
    <property name="lbSrc" location="../${lbName}/src" />
    <!-- source code dir of test   -->
    <property name="lbLib" location="../${lbName}/lib" />
    <property name="lbTest" location="../${lbName}/test" />
    <!-- Names of temporary build/test directories, which are deleted before build -->
    <property name="lbBuild" location="../${lbName}/build" />
    <property name="lbDist" location="../${lbName}/dist" />
    <property name="lb-build-test" location="../${lbName}/build-test"/>
    <property name="lb-test-reports" location="../${lbName}/test-reports"/>
    <!-- Note: if build involves calling another build.xml,  -->
    <!-- these directories cannot use ../${projName}/ because of Docker -->

    <!--*******************************************************************-->

    <!-- LPhyBEAST version is loaded from version.xml -->
    <xmlproperty file="version.xml" collapseAttributes="true"/>

    <property name="addonVersion" value="${addon.version}"/>
    <property name="addonName" value="${lbName}.v${addonVersion}"/>

    <!--*******************************************************************-->

    <property name="lphy" location="../linguaPhylo/LPhy"/>
    <property name="outercore" location="../beast-outercore/"/>

    <import file="${lphy}/build.xml"/>
    <import file="../beast-outercore/build.xml" />

    <!--*******************************************************************-->

    <!-- Revert to pristine state. -->
    <target name="clean">
        <delete dir="${lbBuild}"/>
        <delete dir="${lbDist}"/>
        <delete dir="${lb-build-test}"/>
        <delete dir="${lb-test-reports}"/>
    </target>

    <!-- Compile dependencies, prepare to compile lphybeast -->
    <target name="init" depends="clean">
        <echo message="Java version: ${java.version}"/>
        <echo message="${ant.project.name}: ${ant.file}"/>
        <echo message="Working dir is ${user.dir}." />
        <echo message="Current dir is ${basedir}." />

        <mkdir dir="${lbBuild}"/>
<!--        <mkdir dir="${lbDist}"/>-->

        <!-- call target from lphy and outercore build.xml -->

        <echo message="build ${lphy}/build.xml"/>
        <!--   need lphy.jar     -->
        <ant antfile="${lphy}/build.xml" target="dist" inheritAll="false"/>
        <!--   outercore is beast2 package, install from package manager     -->
        <echo message="build ${outercore}/build.xml"/>
        <ant antfile="${outercore}/build.xml" target="compile" inheritAll="false"/>
    </target>


    <path id="lphybe-clspath">
        <pathelement path="${classpath}"/>
        <pathelement path="${lphyBuild}"/>
        <pathelement path="${lphyResources}"/>
        <fileset dir="${lphyLib}" includes="*.jar"/>
        <pathelement path="${outcorBuild}"/>
        <fileset dir="${outcorLib}" includes="*.jar"/>
        <pathelement path="${lbBuild}"/>
        <fileset dir="${lbLib}" includes="*.jar"/>
    </path>

    <!-- Compile -->
    <target name="compile" depends="init">
        <echo>LPhy BEAST classpath is ${toString:lphybe-clspath}</echo>
        <!-- imported from ${lphy}/build.xml -->
        <javac target="${targetVersion}" source="${sourceVersion}"
               srcdir="${lbSrc}" destdir="${lbBuild}" includeantruntime="false">
            <classpath refid="lphybe-clspath"/>
        </javac>
        <echo message="Successfully compiled ${lbName}." />
    </target>

    <!-- Release -->
    <property name="pack" value="${lbDist}/package"/>

    <!-- Create BEAST 2 package, no dist task here -->
    <target name="release" depends="compile" unless="file.exists"
            description="release as BEAST 2 package">
        <echo>name=${addon.name}, version=${addon.version}</echo>
        <echo>depends=${addon.depends.on}, atleast=${addon.depends.atleast}</echo>
        <echo>LPhy BEAST file name = ${addonName}</echo>

        <mkdir dir="${lbDist}"/>
        <mkdir dir="${pack}"/>

        <!--   use as BEAST 2 plugin, but need lphy.jar     -->
        <jar jarfile="${pack}/lib/${addonName}.jar">
            <fileset dir="${lbBuild}" includes="**/*.class"/>

            <manifest>
                <attribute name="Main-Class" value="lphybeast.LPhyBEAST"/>
                <attribute name="Version" value="${addonVersion}"/>
<!--                <attribute name="Class-Path" value="${addonName}.jar"/>-->
                <attribute name="Created-By" value="${createBy}"/>
                <!--   ${user.name}    -->
                <attribute name="Built-By" value="${builtBy}"/>
                <attribute name="Built-On" value="${TODAY}"/>
            </manifest>
        </jar>

        <!--   copy picocli libs     -->
        <copy todir="${pack}/lib">
            <fileset dir="${lbLib}" >
                <include name="picocli*.jar"/>
                <include name="guava*.jar"/>
                <include name="jblas*.jar"/>
            </fileset>
        </copy>

        <!--  copy lphy-?-?-.jar, ${lphyJar} is imported from  ${lphy}/build.xml -->
        <property name="lphyRelease" value="${lphyDist}/${lphyJar}"/>
        <available property="file.exists" file="${lphyRelease}.jar"/>
        <copy file="${lphyRelease}.jar" todir="${pack}/lib" />
        <echo>Copy and include ${lphyRelease}.jar to ${pack}/lib.</echo>

        <copy file="README.md" tofile="${pack}/README" />
<!--      TODO  <copy file="LICENSE" tofile="${pack}/LICENSE" />-->
        <copy file="version.xml" todir="${pack}" />
        <zip destfile="${lbDist}/${addonName}.zip" basedir="${pack}" />

<!--        <delete dir="${pack}"/>-->

        <echo/>
        <echo>** Package ${lbDist}/${addonName}.zip created successfully! **</echo>

        <copy file="${lbDist}/${addonName}.zip" todir="releases" />
        <echo/>
        <echo>Copy ${lbDist}/${addonName}.zip to releases folder</echo>

        <delete file="${lbDist}/${addonName}.zip"/>
        <echo/>
        <echo>Remove ${lbDist}/${addonName}.zip</echo>

    </target>

    <!-- bundle all jars from lib, not used by release -->
    <target name="dist-all-jar" depends="compile">
        <mkdir dir="${pack}"/>
        <jar jarfile="${pack}/${lbName}.src.jar">
            <fileset dir="src"/>
        </jar>

        <!-- lphybeast depends on lphy -->
        <jar jarfile="${pack}/${lbName}.v${addonVersion}.jar">
            <fileset dir="${lbBuild}/**/*.class"/>
            <fileset dir="${lphyBuild}/**/*.class"/>
            <fileset dir="${outcorBuild}/**/*.class"/>

            <manifest>
                <attribute name="Main-Class" value="lphybeast.LPhyBEAST"/>
                <attribute name="Version" value="${addonVersion}"/>
<!--                <attribute name="Class-Path" value="${projName}.v${addonVersion}.jar"/>-->
                <attribute name="Created-By" value="${project.groupId} team"/>
                <attribute name="Built-By" value="${builtBy}"/>
                <attribute name="Built-Date" value="${TODAY}"/>
            </manifest>
            <zipgroupfileset dir="${lphyLib}" includes="*.jar"/>
            <zipgroupfileset dir="${outcorLib}" includes="*.jar"/>
            <zipgroupfileset dir="${lbLib}" includes="*.jar"/>
        </jar>
    </target>


    <!-- Prepare for unit test compilation -->
    <target name="init-test">
        <echo message="Java version: ${java.version}"/>
        <echo message="${ant.project.name}: ${ant.file}"/>
        <echo message="Working dir is ${user.dir}." />
        <echo message="Current dir is ${basedir}." />

        <mkdir dir="${lb-build-test}"/>
        <mkdir dir="${lb-test-reports}"/>
    </target>

    <!-- Compile unit tests -->
    <target name="compile-test" depends="init-test">
        <javac target="${targetVersion}" source="${sourceVersion}" srcdir="${lbTest}"
               destdir="${lb-build-test}" includeantruntime="false">
            <classpath refid="lphybe-clspath"/>
        </javac>
        <echo message="Successfully compiled ${lbName} tests."/>
    </target>


    <!-- Run unit tests -->
    <target name="test" depends="compile, compile-test">
        <pathconvert property="clsPath" refid="lphybe-clspath"/>
        <echo>LPhy BEAST test classpath is ${clsPath}</echo>

        <junit printsummary="yes" failureproperty="testFailed">
            <classpath>
                <path refid="lphybe-clspath"/>
                <pathelement path="${lb-build-test}"/>
            </classpath>
            <batchtest fork="yes" todir="${lb-test-reports}">
                <fileset dir="${lbTest}">
                    <include name="**/*Test.java"/>
                    <exclude name="**/TutorialTest.java"/>
                </fileset>
                <formatter type="plain"/>
            </batchtest>
        </junit>

        <fail if="testFailed" status="1" message="Unit test of ${lbName} failed."/>
    </target>

    <target name="github-actions" depends="compile, compile-test, test">
        <fail if="testFailed" message="One or more ${lbName} tests failed."/>
    </target>

</project>
