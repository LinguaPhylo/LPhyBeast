<project default="compile" basedir="." name="lphybeast">

    <property name="lbName" value="LPhyBeast"/>
    <!-- Overwrite this if extension build.xml is in a different folder structure  -->
    <property name="lbRepo" location=".."/>
    <!-- source code dir separated from test   -->
    <property name="lbSrc" location="${lbRepo}/${lbName}/src" />
    <!-- source code dir of test   -->
    <property name="lbLib" location="${lbRepo}/${lbName}/lib" />
    <property name="lbTest" location="${lbRepo}/${lbName}/test" />
    <!-- Names of temporary build/test directories, which are deleted before build -->
    <property name="lbBuild" location="${lbRepo}/${lbName}/build" />
    <property name="lbDist" location="${lbRepo}/${lbName}/dist" />
    <property name="lb-build-test" location="${lbRepo}/${lbName}/build-test"/>
    <property name="lb-test-reports" location="${lbRepo}/${lbName}/test-reports"/>

    <!--*******************************************************************-->

    <!-- LPhyBEAST version is loaded from version.xml -->
    <xmlproperty file="version.xml" collapseAttributes="true"/>

    <property name="lbVersion" value="${addon.version}"/>
    <property name="lbJarName" value="${lbName}.v${lbVersion}"/>

    <!--*******************************************************************-->

    <!--  overwrite lphyRepo in the LPhy build to fit in a different folder structure -->
    <property name="lphyRepo" location="../linguaPhylo"/>
    <property name="lphy" location="${lphyRepo}/LPhy"/>
    <property name="outercore" location="../beast-outercore/"/>
    <!-- Release overwrite pkgDir in outercore -->
    <property name="pkgDir" location="${lbDist}/package"/>

    <include file="${lphy}/build.xml"/>
    <include file="${outercore}/build.xml" />

    <!--*******************************************************************-->

    <!-- Revert to pristine state. -->
    <target name="clean">
        <delete dir="${lbBuild}"/>
        <delete dir="${lbDist}"/>
        <delete dir="${lb-build-test}"/>
        <delete dir="${lb-test-reports}"/>
    </target>

    <!-- Compile dependencies, prepare to compile lphybeast -->
    <target name="init" depends="clean">
        <echo message="Java version: ${java.version}"/>
        <echo message="${ant.project.name}: ${ant.file}"/>
        <echo message="Working dir is ${user.dir}." />
        <echo message="Current dir is ${basedir}." />

        <mkdir dir="${lbBuild}"/>
<!--        <mkdir dir="${lbDist}"/>-->

        <!-- depend on targets from lphy and outercore in compile -->
    </target>

    <!--****** BEAST 2 package pipeline ******-->

    <path id="lphybe-clspath">
<!--        <pathelement path="${classpath}"/>-->
        <!--  lphy JAR  -->
        <fileset dir="${lphyDist}" includes="${lphyJ8Jar}.jar"/>

        <!--  non-modular JARs  -->
        <pathelement path="${outcorBuild}"/>
        <fileset dir="${outcorLib}" includes="*.jar"/>
        <pathelement path="${lbBuild}"/>
        <fileset dir="${lbLib}" includes="*.jar"/>
    </path>

    <!-- Compile, depend on lphy.dist-j8 and outercore.compile -->
    <target name="compile" depends="init, lphy.dist-j8, outercore.compile">
        <echo>LPhyBEAST lib path = ${lbLib}</echo>
<!--        <echo>LPhyBEAST classpath = ${toString:lphybe-clspath}</echo>-->

        <!-- imported from ${lphy}/build.xml -->
        <javac target="${targetVersion}" source="${sourceVersion}"
               srcdir="${lbSrc}" destdir="${lbBuild}" includeantruntime="false">
            <classpath refid="lphybe-clspath"/>
        </javac>
        <echo message="Successfully compiled ${lbName}." />
    </target>


    <!-- jar -->
    <target name="dist" depends="compile">
        <echo>name=${addon.name}, version=${addon.version}</echo>
        <echo>depends=${addon.depends.on}, atleast=${addon.depends.atleast}</echo>
        <echo>LPhy BEAST file name = ${addonName}</echo>

        <mkdir dir="${lbDist}"/>
        <mkdir dir="${pkgDir}"/>

        <!-- manifest -->
        <tstamp/>
        <echo message="Version ${lphyVersion}" />
<!--        <echo message="Class-Path ${lbJarName}.jar" />-->
        <echo message="Created-By ${createBy}" />
        <echo message="Built-By ${builtBy}" />
        <echo message="Built-Date ${TODAY}" />

        <!--   use as BEAST 2 plugin, but need lphy.jar     -->
        <jar jarfile="${pkgDir}/lib/${lbJarName}.jar">
            <fileset dir="${lbBuild}" includes="**/*.class"/>

            <manifest>
                <attribute name="Main-Class" value="lphybeast.LPhyBEAST"/>
                <attribute name="Version" value="${lbVersion}"/>
                <!--                <attribute name="Class-Path" value="${lbJarName}.jar"/>-->
                <attribute name="Created-By" value="${createBy}"/>
                <!--   ${user.name}    -->
                <attribute name="Built-By" value="${builtBy}"/>
                <attribute name="Built-On" value="${TODAY}"/>
            </manifest>
        </jar>

        <echo message="Successfully create ${lbJarName}.jar in ${pkgDir}/lib/" />
    </target>

    <!-- Create BEAST 2 package -->
    <target name="release" depends="dist" unless="file.exists"
            description="release as BEAST 2 package">

        <available property="file.exists" file="${pkgDir}/lib/${lbJarName}.jar"/>

        <!--   copy picocli libs     -->
        <copy todir="${pkgDir}/lib">
            <fileset dir="${lbLib}" >
                <include name="picocli*.jar"/>
                <include name="guava*.jar"/>
                <include name="jblas*.jar"/>
            </fileset>
        </copy>

        <!--  copy lphy-j8-?-?-?.jar, ${lphyJ8Jar} is imported from  ${lphy}/build.xml -->
        <property name="lphyRelease" value="${lphyDist}/${lphyJ8Jar}"/>
        <available property="file.exists" file="${lphyRelease}.jar"/>
        <copy file="${lphyRelease}.jar" todir="${pkgDir}/lib" />

        <copy file="README.md" tofile="${pkgDir}/README" />
<!--      TODO  <copy file="LICENSE" tofile="${pack}/LICENSE" />-->
        <copy file="version.xml" todir="${pkgDir}" />
        <zip destfile="${lbDist}/${lbJarName}.zip" basedir="${pkgDir}" />

<!--        <delete dir="${pkgDir}"/>-->

        <echo/>
        <echo>Package ${lbDist}/${lbJarName}.zip created successfully! </echo>

        <copy file="${lbDist}/${lbJarName}.zip" todir="releases" />
        <echo>Copy ${lbDist}/${lbJarName}.zip to releases folder</echo>

        <delete file="${lbDist}/${lbJarName}.zip"/>
        <echo>Remove ${lbDist}/${lbJarName}.zip</echo>

    </target>

    <!-- bundle all jars from lib, not used by release -->
    <target name="dist-allin1-jar" depends="dist" unless="file.exists" >
        <!--lphybeast jar-->
        <available property="file.exists" file="${pkgDir}/lib/${lbJarName}.jar"/>

        <!--lphy jar-->
        <available property="file.exists" file="${lphyDist}/${lphyJ8Jar}.jar"/>

        <property name="lbAllIn1JarName" value="${lbName}-allin1-${lbVersion}"/>
        <!-- all jars -->
        <jar jarfile="${pkgDir}/${lbAllIn1JarName}.jar">
            <!--lphybeast-->
            <zipgroupfileset dir="${pkgDir}/lib" includes="${lbJarName}.jar"/>
            <zipgroupfileset dir="${lbLib}" includes="*.jar"/>
            <!--lphy-->
            <zipgroupfileset dir="${lphyDist}" includes="${lphyJ8Jar}.jar"/>
            <zipgroupfileset dir="${lphyLib}" includes="*.jar"/>
            <!--outercore-->
            <fileset dir="${outcorBuild}" includes="**/*.class"/>
            <zipgroupfileset dir="${outcorLib}" includes="*.jar"/>
        </jar>

        <echo message="Successfully create ${lbAllIn1JarName}.jar in ${pkgDir}" />
    </target>

    <!--****** github-actions ******-->

    <!-- Prepare for unit test compilation -->
    <target name="init-test">
        <echo message="Java version: ${java.version}"/>
        <echo message="${ant.project.name}: ${ant.file}"/>
        <echo message="Working dir is ${user.dir}." />
        <echo message="Current dir is ${basedir}." />

        <mkdir dir="${lb-build-test}"/>
        <mkdir dir="${lb-test-reports}"/>
    </target>

    <!-- Compile unit tests -->
    <target name="compile-test" depends="init-test">
        <javac target="${targetVersion}" source="${sourceVersion}" srcdir="${lbTest}"
               destdir="${lb-build-test}" includeantruntime="false">
            <classpath refid="lphybe-clspath"/>
        </javac>
        <echo message="Successfully compiled ${lbName} tests."/>
    </target>


    <!-- Run unit tests -->
    <target name="test" depends="compile, compile-test">
<!--        <echo>LPhyBEAST test classpath = ${toString:lphybe-clspath}:${lb-build-test}</echo>-->

        <junit printsummary="yes" failureproperty="testFailed">
            <classpath>
                <path refid="lphybe-clspath"/>
                <pathelement path="${lb-build-test}"/>
            </classpath>
            <batchtest fork="yes" todir="${lb-test-reports}">
                <fileset dir="${lbTest}">
                    <include name="**/*Test.java"/>
                    <exclude name="**/TutorialTest.java"/>
                </fileset>
                <formatter type="plain"/>
            </batchtest>
        </junit>

        <fail if="testFailed" status="1" message="Unit test of ${lbName} failed."/>
    </target>

    <target name="github-actions" depends="compile, compile-test, test">
        <fail if="testFailed" message="One or more ${lbName} tests failed."/>
    </target>

</project>
