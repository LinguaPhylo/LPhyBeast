<project default="compile" basedir="." name="lphybeast">

    <property name="lbName" value="LPhyBeast"/>
    <!-- Overwrite this if extension build.xml is in a different folder structure  -->
    <property name="lbRepo" value=".."/>
    <!-- source code dir separated from test   -->
    <property name="lbSrc" location="${lbRepo}/${lbName}/src" />
    <property name="lbLib" location="${lbRepo}/${lbName}/lib" />
    <!-- source code dir of test   -->
    <property name="lbTest" location="${lbRepo}/${lbName}/test" />
    <!-- Names of temporary build/test directories, which are deleted before build -->
    <property name="lbBuild" location="${lbRepo}/${lbName}/build" />
    <property name="lbDist" location="${lbRepo}/${lbName}/dist" />
    <property name="lb-build-test" location="${lbRepo}/${lbName}/build-test"/>
    <property name="lb-test-reports" location="${lbRepo}/${lbName}/test-reports"/>

    <!--*******************************************************************-->

    <!-- LPhyBEAST version is loaded from version.xml -->
    <xmlproperty file="version.xml" collapseAttributes="true"/>

    <property name="lbVersion" value="${addon.version}"/>
    <property name="lbJarName" value="${lbName}.v${lbVersion}"/>

    <!--*******************************************************************-->

    <!--  overwrite lphyRepo in the LPhy build to fit in a different folder structure -->
    <property name="lphyRepo" location="../linguaPhylo"/>
    <property name="lphy" location="${lphyRepo}/LPhy"/>

    <!-- Release overwrite pkgDir in outercore -->
    <property name="pkgDir" location="${lbDist}/package"/>

    <include file="${lphy}/build.xml"/>

    <!--*******************************************************************-->

    <!-- Revert to pristine state. -->
    <target name="clean">
        <delete dir="${lbBuild}"/>
        <delete dir="${lbDist}"/>
        <delete dir="${lb-build-test}"/>
        <delete dir="${lb-test-reports}"/>
    </target>

    <!-- Compile dependencies, prepare to compile lphybeast -->
    <target name="init" depends="clean">
        <echo message="Java version: ${java.version}"/>
        <echo message="${ant.project.name}: ${ant.file}"/>
        <echo message="Working dir is ${user.dir}." />
        <echo message="Current dir is ${basedir}." />

        <mkdir dir="${lbBuild}"/>
<!--        <mkdir dir="${lbDist}"/>-->

        <!-- depend on targets from lphy and outercore in compile -->
    </target>

    <!--****** build beast2 and beastlabs ******-->
    <property name="beast2" location="../beast2/"/>
    <property name="beast2build" location="${beast2}/build"/>
    <property name="blabs" location="../BEASTLabs/"/>
    <property name="blabsbuild" location="${blabs}/build"/>

    <path id="beast-clspath">
        <fileset dir="${beast2}/lib" includes="jam.jar"/>
        <fileset dir="${beast2}/lib" includes="beagle.jar"/>
        <fileset dir="${beast2}/lib" includes="fest.jar"/>
        <fileset dir="${beast2}/lib" includes="colt.jar"/>
        <fileset dir="${beast2}/lib" includes="antlr-runtime-4.7.jar"/>
        <fileset dir="${beast2}/lib" includes="commons-math3-3.1.1.jar"/>
        <fileset dir="${beast2}/lib" includes="junit-4.8.2.jar"/>
        <pathelement path="${beast2build}"/>
    </path>

<!--    <target name="build-beast" >-->
<!--        &lt;!&ndash;  BEASTLabs.jar include beast2      &ndash;&gt;-->
<!--        <ant target="build_jar_all_BEASTlabs_NoJUnitTest" antfile="build.xml" dir="${blabs}" inheritAll="false"/>-->
<!--    </target>-->

    <!-- Cannot use beast2 build because of Java 1.6 code  -->
    <target name="compile-beastlabs">
        <echo>Building BEAST 2</echo>
        <echo>BEAST 2 classpath = ${toString:beast-clspath}</echo>

        <delete dir="${beast2build}"/>
        <mkdir dir="${beast2build}"/>

        <!-- Compile the java code from ${src} into ${build} /bin -->
        <javac source="1.8" target="1.8" srcdir="${beast2}/src" destdir="${beast2build}"
               classpathref="beast-clspath" fork="true" includeAntRuntime='false' nowarn="on">
            <include name="beast/**/**"/>
            <!-- apache commons math -->
            <include name="org/**/**"/>
            <!-- TODO bad dependencies -->
            <include name="test/beast/**" />
        </javac>

        <echo>Building BEAST Labs</echo>
        <delete dir="${blabsbuild}"/>
        <mkdir dir="${blabsbuild}"/>

        <!--  beast.util.Script depends on  jdk.nashorn.api.scripting.ScriptObjectMirror   -->
        <property name="nashorn.jar" location="${lbRepo}/${lbName}/libext/nashorn.jar"/>

        <javac source="1.8" target="1.8" srcdir="${blabs}/src" destdir="${blabsbuild}"
               classpathref="beast-clspath" fork="true" includeAntRuntime='false' nowarn="on">
            <compilerarg value="-Xbootclasspath/a:${nashorn.jar}"/>
            <include name="beast/**/**"/>
        </javac>
    </target>

    <!--****** release BEAST 2 package pipeline ******-->

    <path id="lphybe-clspath">
<!--        <pathelement path="${classpath}"/>-->
        <!--  non-modular lphy JAR  -->
        <fileset dir="${lphyDist}" includes="${lphyJ8Jar}.jar"/>

        <!--  BEASTLabs.jar include beast2  -->
        <path refid="beast-clspath"/>
        <pathelement path="${blabsbuild}"/>

        <pathelement path="${lbBuild}"/>
        <fileset dir="${lbLib}" includes="*.jar"/>
    </path>

    <!-- Compile, depend on lphy.dist-j8 and outercore.compile -->
    <target name="compile" depends="init, lphy.dist-j8, compile-beastlabs">
        <echo>LPhyBEAST lib path = ${lbLib}</echo>
        <echo>LPhyBEAST classpath = ${toString:lphybe-clspath}</echo>

        <!-- imported from ${lphy}/build.xml -->
        <javac target="${targetVersion}" source="${sourceVersion}"
               srcdir="${lbSrc}" destdir="${lbBuild}" includeantruntime="false">
            <classpath refid="lphybe-clspath"/>
        </javac>
        <echo message="Successfully compiled ${lbName}." />
    </target>


    <!-- jar -->
    <target name="dist" depends="compile">
        <echo>name=${addon.name}, version=${addon.version}</echo>
        <echo>depends=${addon.depends.on}, atleast=${addon.depends.atleast}</echo>
        <echo>LPhy BEAST file name = ${addonName}</echo>

        <mkdir dir="${lbDist}"/>
        <mkdir dir="${pkgDir}"/>

        <!-- manifest -->
        <tstamp/>
        <echo message="Version ${lphyVersion}" />
<!--        <echo message="Class-Path ${lbJarName}.jar" />-->
        <echo message="Created-By ${createBy}" />
        <echo message="Built-By ${builtBy}" />
        <echo message="Built-Date ${TODAY}" />

        <!--   use as BEAST 2 plugin, but need lphy.jar     -->
        <jar jarfile="${pkgDir}/lib/${lbJarName}.jar">
            <fileset dir="${lbBuild}" includes="**/*.class"/>

            <manifest>
                <attribute name="Main-Class" value="lphybeast.LPhyBEAST"/>
                <attribute name="Version" value="${lbVersion}"/>
                <!--                <attribute name="Class-Path" value="${lbJarName}.jar"/>-->
                <attribute name="Created-By" value="${createBy}"/>
                <!--   ${user.name}    -->
                <attribute name="Built-By" value="${builtBy}"/>
                <attribute name="Built-On" value="${TODAY}"/>
            </manifest>
        </jar>

        <echo message="Successfully create ${lbJarName}.jar in ${pkgDir}/lib/" />
    </target>

    <!-- Create BEAST 2 package -->
    <!-- 1. update version number in version.xml and LPhyBEAST -->
    <!-- 2. commit all changes -->
    <!-- 3. ant release : create LPhyBeast.v?.?.?.zip -->
    <!-- 4. cp to "releases" folder and commit  -->
    <!-- 5. release to CBAN and update github release page -->
    <target name="release" depends="dist" unless="file.exists"
            description="release as BEAST 2 package">

        <available property="file.exists" file="${pkgDir}/lib/${lbJarName}.jar"/>

        <!--   copy picocli libs     -->
        <copy todir="${pkgDir}/lib">
            <fileset dir="${lbLib}" >
                <include name="picocli*.jar"/>
                <include name="guava*.jar"/>
                <include name="jblas*.jar"/>
            </fileset>
        </copy>

        <!--  copy lphy-j8-?-?-?.jar, ${lphyJ8Jar} is imported from  ${lphy}/build.xml -->
        <property name="lphyRelease" value="${lphyDist}/${lphyJ8Jar}"/>
        <available property="file.exists" file="${lphyRelease}.jar"/>
        <copy file="${lphyRelease}.jar" todir="${pkgDir}/lib" />

        <copy file="README.md" tofile="${pkgDir}/README" />
<!--      TODO  <copy file="LICENSE" tofile="${pack}/LICENSE" />-->
        <copy file="version.xml" todir="${pkgDir}" />
        <zip destfile="${lbDist}/${lbJarName}.zip" basedir="${pkgDir}" />

<!--        <delete dir="${pkgDir}"/>-->

        <echo/>
        <echo>Package ${lbDist}/${lbJarName}.zip created successfully! </echo>

        <copy file="${lbDist}/${lbJarName}.zip" todir="releases" />
        <echo>Copy ${lbDist}/${lbJarName}.zip to releases folder</echo>

<!--        <delete file="${lbDist}/${lbJarName}.zip"/>-->
<!--        <echo>Remove ${lbDist}/${lbJarName}.zip</echo>-->

    </target>

    <!--****** all in 1 jar ******-->

    <!-- make the BEASTLabs.jar -->
    <property name="blabsdist" location="${blabsbuild}/dist"/>
    <property name="blabsJarName" value="BEASTLabs"/>

    <target name="dist-beastlabs" depends="compile-beastlabs"
            description="create BEASTlabs jar including beast 2 classes.">

        <delete dir="${blabsdist}"/>
        <!-- Create the distribution directory -->
        <mkdir dir="${blabsdist}" />

        <!-- Put everything in ${buildlabs} into the beast.jar file -->
        <jar jarfile="${blabsdist}/${blabsJarName}.jar">
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
                <attribute name="Main-Class" value="beast.app.BeastMCMC" />
            </manifest>
            <fileset dir="${blabsdist}">
                <include name="beast/**/*.class" />
            </fileset>
            <fileset dir="${beast2build}">
                <include name="beast/**/*.class" />
                <include name="beast/**/*.properties" />
                <include name="beast/**/*.png" />
                <include name="beagle/**/*.class" />
                <include name="org/**/*.class" />
            </fileset>
            <zipgroupfileset dir="${beast2}/lib" includes="jam.jar" />
            <zipgroupfileset dir="${beast2}/lib" includes="beagle.jar" />
            <zipgroupfileset dir="${beast2}/lib" includes="colt.jar" />
            <zipgroupfileset dir="${beast2}/lib" includes="commons-math3-3.1.1.jar" />
            <zipgroupfileset dir="${beast2}/lib" includes="antlr-runtime-4.7.jar"/>
        </jar>
        <echo message="Successfully create ${blabsJarName}.jar in ${blabsdist}" />
    </target>

    <!-- bundle all jars from lib, not used by release -->
    <target name="dist-allin1-jar" depends="dist-beastlabs, dist" unless="file.exists"
            description="create all in one jar.">
        <!--lphybeast jar-->
        <available property="file.exists" file="${pkgDir}/lib/${lbJarName}.jar"/>

        <!--lphy jar-->
        <available property="file.exists" file="${lphyDist}/${lphyJ8Jar}.jar"/>

        <available property="file.exists" file="${blabsdist}/BEASTLabs.jar"/>

        <property name="lbAllIn1JarName" value="${lbName}-allin1-${lbVersion}"/>
        <!-- all jars -->
        <jar jarfile="${pkgDir}/${lbAllIn1JarName}.jar">
            <!--lphybeast-->
            <zipgroupfileset dir="${pkgDir}/lib" includes="${lbJarName}.jar"/>
            <zipgroupfileset dir="${lbLib}" includes="*.jar"/>
            <!--lphy-->
            <zipgroupfileset dir="${lphyDist}" includes="${lphyJ8Jar}.jar"/>
            <zipgroupfileset dir="${lphyLib}" includes="*.jar"/>
            <!--  BEASTLabs.jar include beast2  -->
            <zipgroupfileset dir="${blabsdist}" includes="${blabsJarName}.jar"/>
        </jar>

        <echo message="Successfully create ${lbAllIn1JarName}.jar in ${pkgDir}" />
    </target>

    <!--****** github-actions ******-->

    <!-- Prepare for unit test compilation -->
    <target name="init-test">
        <echo message="Java version: ${java.version}"/>
        <echo message="${ant.project.name}: ${ant.file}"/>
        <echo message="Working dir is ${user.dir}." />
        <echo message="Current dir is ${basedir}." />

        <mkdir dir="${lb-build-test}"/>
        <mkdir dir="${lb-test-reports}"/>
    </target>

    <!-- Compile unit tests -->
    <target name="compile-test" depends="init-test">
        <javac target="${targetVersion}" source="${sourceVersion}" srcdir="${lbTest}"
               destdir="${lb-build-test}" includeantruntime="false">
            <classpath refid="lphybe-clspath"/>
        </javac>
        <echo message="Successfully compiled ${lbName} tests."/>
    </target>


    <!-- Run unit tests -->
    <target name="test" depends="compile, compile-test">
        <echo>LPhyBEAST test classpath = ${toString:lphybe-clspath}:${lb-build-test}</echo>

        <junit printsummary="yes" failureproperty="testFailed">
            <classpath>
                <path refid="lphybe-clspath"/>
                <pathelement path="${lb-build-test}"/>
            </classpath>
            <batchtest fork="yes" todir="${lb-test-reports}">
                <fileset dir="${lbTest}">
                    <include name="**/*Test.java"/>
                    <exclude name="**/TutorialTest.java"/>
                </fileset>
                <formatter type="plain"/>
            </batchtest>
        </junit>

        <fail if="testFailed" status="1" message="Unit test of ${lbName} failed."/>
    </target>

    <target name="github-actions" depends="compile, compile-test, test">
        <fail if="testFailed" message="One or more ${lbName} tests failed."/>
    </target>

</project>
