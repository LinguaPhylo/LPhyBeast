<project default="compile" basedir="." name="lphybeast">

    <!-- Java 11 -->
    <property name="sourceVersion" value="16"/>
    <property name="targetVersion" value="16"/>

    <!--*******************************************************************-->

    <!-- Ant build fails if the repo dir isn't named linguaPhylo -->
    <property name="repoName" value="LPhyBeast"/>
    <!-- source code dir separated from test   -->
    <property name="src" location="src" />
    <!-- source code dir of test   -->
    <property name="lib" location="lib" />
    <property name="test" location="test" />
    <!-- Names of temporary build/test directories, which are deleted before build -->
    <property name="build" location="build" />
    <property name="dist" location="dist" />
    <property name="build-test" location="build-test"/>
    <property name="test-reports" location="test-reports"/>
    <!-- Note: if build involves calling another build.xml,  -->
    <!-- these directories cannot use ../${repoName}/ because of Docker -->

    <property name="projName" value="LPhyBEAST"/>
    <property name="projVersion" value="0.0.2"/>

    <!--*******************************************************************-->

    <property name="lphy" location="../linguaPhylo/"/>
    <property name="outercore" location="../beast-outercore/"/>

    <import file="${lphy}/build.xml"/>
    <import file="${outercore}/build.xml" />

    <!--*******************************************************************-->

    <path id="lphybe-clspath">
        <pathelement path="${lphy}/build"/>
        <fileset dir="${lphy}/lib" includes="*.jar"/>
        <pathelement path="${outercore}/build"/>
        <fileset dir="${outercore}/lib" includes="*.jar"/>
        <pathelement path="${classpath}"/>
        <fileset dir="${lib}" includes="*.jar"/>
        <pathelement path="${build}"/>
    </path>


    <!-- Revert to pristine state. -->
    <target name="clean">
        <delete dir="${build}"/>
        <delete dir="${dist}"/>
        <delete dir="${build-test}"/>
        <delete dir="${test-reports}"/>
    </target>

    <!-- Compile dependencies, prepare to compile lphybeast -->
    <target name="init" depends="clean">
        <echo message="Java version: ${java.version}"/>
        <echo message="${ant.project.name}: ${ant.file}"/>
        <echo message="Working dir is ${repoName}." />

        <mkdir dir="${build}"/>
        <mkdir dir="${dist}"/>

        <!-- call target from lphy and outercore build.xml -->

        <echo message="build ${lphy}/build.xml"/>
        <!--   need lphy.jar     -->
        <ant antfile="${lphy}/build.xml" target="dist" inheritAll="false"/>
        <!--   outercore is beast2 package, install from package manager     -->
        <echo message="build ${outercore}/build.xml"/>
        <ant antfile="${outercore}/build.xml" target="compile" inheritAll="false"/>

    </target>

    <!-- Compile -->
    <target name="compile" depends="init">
<!--        <pathconvert property="classpathproperty" refid="lphybe-clspath"/>-->
<!--        <echo>${repoName} classpath is ${classpathproperty}</echo>-->

        <javac target="${targetVersion}" source="${sourceVersion}" srcdir="${src}" destdir="${build}"
               classpathref="lphybe-clspath" includeantruntime="false">
        </javac>
        <echo message="Successfully compiled ${projName}." />
    </target>

    <!-- Release -->
    <property name="pack" value="${dist}/package"/>

    <!-- Create BEAST 2 package, no dist task here -->
    <target name="release" depends="compile" unless="file.exists"
            description="release as BEAST 2 package">
        <xmlproperty file="version.xml" collapseAttributes="true"/>
        <echo>name=${addon.name}, version=${addon.version}</echo>
        <echo>depends=${addon.depends.on}, atleast=${addon.depends.atleast}</echo>

        <property name="projVersion" value="${addon.version}"/>
        <property name="fullName" value="${projName}.v${projVersion}"/>
        <echo>fullName=${fullName}</echo>

        <mkdir dir="${pack}"/>

        <jar jarfile="${pack}/${fullName}.src.jar" basedir="${src}" />

        <!--   use as BEAST 2 plugin, but need lphy.jar     -->
        <jar jarfile="${pack}/lib/${fullName}.jar">
            <fileset dir="${build}" includes="**/*.class"/>

            <manifest>
                <attribute name="Main-Class" value="lphybeast.LPhyBEAST"/>
            </manifest>
        </jar>

        <!--   copy picocli libs     -->
        <copy todir="${pack}/lib">
            <fileset dir="${lib}" >
                <include name="picocli*.jar"/>
                <include name="guava*.jar"/>
                <include name="jblas*.jar"/>
            </fileset>
        </copy>

        <!--   copy lphy here     -->
        <property name="lphyRelease" value="${lphy}/dist/package/lphy.v${projVersion}"/>
        <available property="file.exists" file="${lphyRelease}.jar"/>
        <copy file="${lphyRelease}.jar" todir="${pack}/lib" />
        <copy file="${lphyRelease}.src.jar" todir="${pack}" />

        <echo>Copy ${lphyRelease}.jar and ${lphyRelease}.src.jar here.</echo>

        <copy file="README.md" tofile="${pack}/README" />
<!--      TODO  <copy file="LICENSE" tofile="${pack}/LICENSE" />-->

        <copy file="version.xml" todir="${pack}" />

        <zip destfile="${dist}/${fullName}.zip" basedir="${pack}" />

<!--        <delete dir="${pack}"/>-->

        <echo/>
        <echo>** Package ${dist}/${fullName}.zip created successfully! **</echo>

        <copy file="${dist}/${fullName}.zip" todir="releases" />
        <echo/>
        <echo>Copy ${dist}/${fullName}.zip to releases folder</echo>

        <delete file="${dist}/${fullName}.zip"/>
        <echo/>
        <echo>Remove ${dist}/${fullName}.zip</echo>

    </target>

    <!-- bundle all jars from lib, not used by release -->
    <target name="dist-all-jar" depends="compile">
        <mkdir dir="${pack}"/>
        <jar jarfile="${pack}/${projName}.src.jar">
            <fileset dir="src"/>
        </jar>

        <!-- lphybeast depends on lphy -->
        <jar jarfile="${pack}/${projName}.v${projVersion}.jar">
            <fileset dir="${build}/**/*.class"/>
            <fileset dir="${outercore}/build/**/*.class"/>
            <fileset dir="${lphy}/build/**/*.class"/>

            <manifest>
                <attribute name="Main-Class" value="lphybeast.LPhyBEAST"/>
            </manifest>
            <zipgroupfileset dir="${lphy}/lib" includes="*.jar"/>
            <zipgroupfileset dir="${outercore}/lib" includes="*.jar"/>
            <zipgroupfileset dir="${lib}" includes="*.jar"/>
        </jar>
    </target>


    <!-- Prepare for unit test compilation -->
    <target name="init-test">
        <echo message="Java version: ${java.version}"/>
        <echo message="${ant.project.name}: ${ant.file}"/>
        <echo message="Working dir is ${repoName}." />

        <mkdir dir="${build-test}"/>
        <mkdir dir="${test-reports}"/>
    </target>


    <!-- Compile unit tests -->
    <target name="compile-test" depends="init-test">
        <javac target="${targetVersion}" source="${sourceVersion}" srcdir="${test}" destdir="${build-test}"
               classpathref="lphybe-clspath"  includeantruntime="false">
        </javac>
        <echo message="Successfully compiled ${projName} tests."/>
    </target>


    <!-- Run unit tests -->
    <target name="test" depends="compile, compile-test">
        <junit printsummary="yes" failureproperty="testFailed">
            <classpath>
                <path refid="lphybe-clspath"/>
                <pathelement path="${build-test}"/>
            </classpath>
            <batchtest fork="yes" todir="${test-reports}">
                <fileset dir="${test}">
                    <include name="**/*Test.java"/>
                </fileset>
                <formatter type="plain"/>
            </batchtest>
        </junit>

        <fail if="testFailed" status="1" message="Unit test of ${projName} failed."/>
    </target>

    <target name="github-actions" depends="compile, compile-test, test">
        <fail if="testFailed" message="One or more ${projName} tests failed."/>
    </target>

</project>
