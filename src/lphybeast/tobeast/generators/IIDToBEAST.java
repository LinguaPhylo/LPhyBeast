package lphybeast.tobeast.generators;

import beast.core.BEASTInterface;
import beast.core.parameter.Parameter;
import beast.math.distributions.Prior;
import lphy.core.distributions.IID;
import lphy.graphicalModel.GenerativeDistribution;
import lphybeast.BEASTContext;
import lphybeast.GeneratorToBEAST;
import outercore.util.BEASTVector;

public class IIDToBEAST implements GeneratorToBEAST<IID, Prior> {
    @Override
    public Prior generatorToBEAST(IID generator, BEASTInterface value, BEASTContext context) {
        GenerativeDistribution baseDistribution = generator.getBaseDistribution();
        GeneratorToBEAST toBEAST = context.getGeneratorToBEAST(baseDistribution);

        // IID DiscretizedGamma is ignored in Exclusion
        // SiteModel is generated by special code in PhyloCTMCToBEAST,
        // because siteRates are parallel with Q matrix
        if (toBEAST == null) return null;

        if (value instanceof Parameter) {
            Parameter parameter = (Parameter) value;

            if (generator.size() != parameter.getDimension())
                throw new IllegalArgumentException("Expecting base distribution sizes and parameter dimension to match!");

            BEASTInterface beastGenerator = toBEAST.generatorToBEAST(baseDistribution, value, context);
            if ( !(beastGenerator instanceof Prior) )
                throw new IllegalArgumentException("Expecting Prior to be generated ! " + beastGenerator.getClass().getSimpleName());

            return (Prior) beastGenerator;

        } else if (value instanceof BEASTVector) {

            throw new UnsupportedOperationException();
// TODO BEASTVector cannot create Prior

//            List<BEASTInterface> values = ((BEASTVector)value).getObjectList();
//
//            if (generator.size() != values.size())
//                throw new IllegalArgumentException("Expecting value and base distribution list sizes to match!");
//
//            List<BEASTInterface> beastGenerators = new ArrayList<>();
//            for (int i = 0; i < values.size(); i++)  {
//                BEASTInterface beastGenerator = toBEAST.generatorToBEAST(baseDistribution, values.get(i), context);
//                beastGenerators.add(beastGenerator);
////                context.putBEASTObject(baseDistribution, beastGenerator);
//            }
//
//            return new BEASTVector(beastGenerators);

        } else {
            throw new IllegalArgumentException("Expecting Parameter value from IID , " +
                    "but getting " + value.getClass().getSimpleName());
        }
    }

    @Override
    public Class<IID> getGeneratorClass() {
        return IID.class;
    }

    @Override
    public Class<Prior> getBEASTClass() {
        return Prior.class;
    }
}
